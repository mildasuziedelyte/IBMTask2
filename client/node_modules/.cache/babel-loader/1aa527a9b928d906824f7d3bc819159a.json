{"ast":null,"code":"var _jsxFileName = \"/home/ugnius/IBM/youtube-ibm/src/components/searchResults/ResultContainer.jsx\";\nimport React, { useState, useEffect } from 'react'; //3rd party\n\nimport { Link } from \"react-router-dom\";\nimport InfiniteScroll from \"react-infinite-scroll-component\"; //helpers\n\nimport { getSearched } from \"../helpers/youtubeAPI\"; //compontents \n\nimport SingleCard from \"../singleCard/SingleCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ResultContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      items: Array.from({\n        length: 5\n      }),\n      videos: [],\n      query: \"\",\n      limit: 5\n    };\n\n    this.fetchMoreData = () => {\n      // a fake async api call like which sends\n      // 20 more records in 1.5 secs\n      setTimeout(() => {\n        this.getSearched();\n        this.setState({\n          items: this.state.items.concat(Array.from({\n            length: 5\n          }))\n        });\n      }, 1500);\n    };\n  }\n\n  componentDidMount() {\n    this.getSearched();\n  }\n\n  async getSearched() {\n    try {\n      const KEY = process.env.REACT_APP_KEY;\n      const url = `https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&key=${KEY}&maxResults=${this.state.limit}&&q=${this.props.query}&pageToken=CBQQAA`;\n      const res = await fetch(url);\n      const data = await res.json();\n      this.setState({\n        videos: data.items,\n        limit: this.state.limit + 5\n      });\n      console.log(this.state.videos);\n      return data.items;\n    } catch (err) {\n      console.log(\"Failed to fetch\", err);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n        className: \"ifs w-11/12 m-auto mt-5 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3\",\n        dataLength: this.state.items.length,\n        next: this.fetchMoreData,\n        hasMore: this.state.limit < 50 ? true : false,\n        loader: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 19\n        }, this),\n        children: this.state.videos.map((video, index) => /*#__PURE__*/_jsxDEV(SingleCard, {\n          video: video\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 12\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 1\n    }, this);\n  }\n\n}\n\nexport default ResultContainer;","map":{"version":3,"sources":["/home/ugnius/IBM/youtube-ibm/src/components/searchResults/ResultContainer.jsx"],"names":["React","useState","useEffect","Link","InfiniteScroll","getSearched","SingleCard","ResultContainer","Component","constructor","state","items","Array","from","length","videos","query","limit","fetchMoreData","setTimeout","setState","concat","componentDidMount","KEY","process","env","REACT_APP_KEY","url","props","res","fetch","data","json","console","log","err","render","map","video","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,cAAP,MAA2B,iCAA3B,C,CAEA;;AAEA,SAAQC,WAAR,QAA0B,uBAA1B,C,CAGA;;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;;AAGA,MAAMC,eAAN,SAA8BP,KAAK,CAACQ,SAApC,CAA8C;AAC9CC,EAAAA,WAAW,GAAI;AACX;AADW,SAGXC,KAHW,GAGL;AACFC,MAAAA,KAAK,EAAEC,KAAK,CAACC,IAAN,CAAW;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAX,CADL;AAENC,MAAAA,MAAM,EAAC,EAFD;AAGNC,MAAAA,KAAK,EAAE,EAHD;AAINC,MAAAA,KAAK,EAAC;AAJA,KAHK;;AAAA,SAsCbC,aAtCa,GAsCG,MAAM;AACpB;AACA;AACAC,MAAAA,UAAU,CAAC,MAAM;AACf,aAAKd,WAAL;AACA,aAAKe,QAAL,CAAc;AACZT,UAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,CAAiBU,MAAjB,CAAwBT,KAAK,CAACC,IAAN,CAAW;AAAEC,YAAAA,MAAM,EAAE;AAAV,WAAX,CAAxB;AADK,SAAd;AAGD,OALS,EAKP,IALO,CAAV;AAMD,KA/CY;AAEd;;AAQDQ,EAAAA,iBAAiB,GAAG;AAEZ,SAAKjB,WAAL;AAIL;;AAGgB,QAAXA,WAAW,GAAI;AACjB,QAAI;AACA,YAAMkB,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,aAAxB;AACF,YAAMC,GAAG,GAAE,4EAA2EJ,GAAI,eAAc,KAAKb,KAAL,CAAWO,KAAM,OAAM,KAAKW,KAAL,CAAWZ,KAAM,mBAAhJ;AACA,YAAMa,GAAG,GAAE,MAAMC,KAAK,CAACH,GAAD,CAAtB;AACA,YAAMI,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACD,WAAKZ,QAAL,CAAc;AACZL,QAAAA,MAAM,EAAEgB,IAAI,CAACpB,KADD;AAEbM,QAAAA,KAAK,EAAE,KAAKP,KAAL,CAAWO,KAAX,GAAiB;AAFX,OAAd;AAIAgB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxB,KAAL,CAAWK,MAAvB;AAEC,aAAQgB,IAAI,CAACpB,KAAb;AACD,KAZD,CAaA,OAAOwB,GAAP,EAAY;AACRF,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8BC,GAA9B;AACH;AACF;;AAaLC,EAAAA,MAAM,GAAG;AACL,wBACJ;AAAA,6BAEA,QAAC,cAAD;AAAgB,QAAA,SAAS,EAAC,6FAA1B;AACU,QAAA,UAAU,EAAE,KAAK1B,KAAL,CAAWC,KAAX,CAAiBG,MADvC;AAEU,QAAA,IAAI,EAAE,KAAKI,aAFrB;AAGU,QAAA,OAAO,EAAE,KAAKR,KAAL,CAAWO,KAAX,GAAmB,EAAnB,GAAwB,IAAxB,GAA+B,KAHlD;AAIU,QAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJlB;AAAA,kBAMW,KAAKP,KAAL,CAAWK,MAAX,CAAkBsB,GAAlB,CAAsB,CAACC,KAAD,EAAQC,KAAR,kBAEtB,QAAC,UAAD;AAAwB,UAAA,KAAK,EAAED;AAA/B,WAAiBC,KAAjB;AAAA;AAAA;AAAA;AAAA,gBAFA;AANX;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,YADI;AAkBH;;AArE6C;;AAyE9C,eAAehC,eAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n//3rd party\nimport {Link} from \"react-router-dom\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\n//helpers\n\nimport {getSearched} from \"../helpers/youtubeAPI\";\n\n\n//compontents \nimport SingleCard from \"../singleCard/SingleCard\";\n\n\nclass ResultContainer extends React.Component {\nconstructor () {\n    super();\n}\n    state={\n        items: Array.from({ length: 5 }),\n    videos:[],\n    query: \"\",\n    limit:5\n}\n\ncomponentDidMount() {\n\n        this.getSearched();\n\n    \n\n  }\n\n\n  async getSearched () {\n      try {\n          const KEY = process.env.REACT_APP_KEY;\n        const url=`https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&key=${KEY}&maxResults=${this.state.limit}&&q=${this.props.query}&pageToken=CBQQAA`\n        const res= await fetch(url)\n        const data = await res.json();\n       this.setState({\n         videos: data.items,\n        limit:(this.state.limit+5)\n        })\n       console.log(this.state.videos);\n      \n        return (data.items);\n      }\n      catch (err) {\n          console.log(\"Failed to fetch\",err);\n      }\n    }\n\n  fetchMoreData = () => {\n    // a fake async api call like which sends\n    // 20 more records in 1.5 secs\n    setTimeout(() => {\n      this.getSearched();\n      this.setState({\n        items: this.state.items.concat(Array.from({ length: 5 })),\n      });\n    }, 1500);\n  };\n\nrender() {\n    return (\n<div>\n    \n<InfiniteScroll className=\"ifs w-11/12 m-auto mt-5 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3\"\n          dataLength={this.state.items.length}\n          next={this.fetchMoreData}\n          hasMore={this.state.limit < 50 ? true : false}\n          loader={<h4>Loading...</h4>}\n        >\n          {this.state.videos.map((video, index) => (\n        \n           <SingleCard key={index} video={video}/>\n           \n          ))}\n        </InfiniteScroll>\n        </div>\n\n    )\n}\n\n}\n\nexport default ResultContainer;"]},"metadata":{},"sourceType":"module"}